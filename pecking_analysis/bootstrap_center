import os
import copy
import numpy as np
from matplotlib import pyplot as plt
import random
import statsmodels.api as sm
import pandas as pd

from pecking_analysis.objects import *
from pecking_analysis.flicker_fusion import *

return cfs

def bootstrap_center_frequency(blocks, log=True, scaled=True, nbootstraps=100, nsamples=100):
      data = concatenate_data(blocks)
      data["Frequency"] = data["Stimulus"].apply(get_filename_frequency)
      data = data[["Frequency", "Response", "Class"]]

      grouped = data.groupby("Class")
      probe_indices = grouped.get_group("Probe").index
      cfs = list()
      for ind in probe_indices:
          fit_data = data.loc[:ind, :]
          if len(fit_data) < 20:
              continue
          ri, ui = get_nonprobe_interruption_rates(fit_data)
          res = [model_logistic(fit_data, log=log, scaled=scaled, disp=False) for ii in xrange(nbootstraps)]
          try:
              cfs.append(get_frequency_probability(res, 0.5, log=log, min_val=ri, max_val=ui))
          except ValueError: # The model wasn't significant
              cfs.append(np.nan)

______________________________________
 data["Frequency"] = data["Stimulus"].apply(get_filename_frequency)
 data = concatenate_data(blocks)
 data = data[["Frequency", "Response", "Class"]]

 ### Change below here
 cfs = list()
 models = list()
 for bootstrap in nbootstraps:

     fit_data = sample_evenly(data, nsamples=nsamples)
     res = compute_model(fit_data)
     cf = get_center_frequency(res)

     models.append(res)
     cfs.append(cf)

 return cfs, models

def sample_evenly(df, nsamples=100, groupby="Class"):

 grouped = df.groupby(groupby)
 samples_per = int(nsamples / len(grouped))
 output = pd.concat([g.sample(samples_per) for name, g in grouped])

 return output

def concatenate_data(blocks):

 return pd.concat([blk.data.copy() for blk in blocks], ignore_index=True)
